{
  "feature_name": "Task Update CLI Command",
  "feature_id": "task-update-cli",
  "created_at": "2025-10-23T22:46:00Z",
  "created_by": "technical-requirements-specialist",
  "status": "in_progress",

  "problem_statement": "Users need a CLI command to update task attributes (status, priority, agent-type, dependencies) after task creation. Currently, once a task is created, there is no way to modify it without directly manipulating the database. This prevents task queue management and workflow correction.",

  "business_value": {
    "description": "Enables flexible task queue management and workflow correction",
    "benefits": [
      "Correct mistakes in task submission without re-creating tasks",
      "Adjust task priorities dynamically based on changing requirements",
      "Fix incorrect dependency graphs",
      "Retry failed tasks with different agent types",
      "Manage task queue effectively during development and debugging"
    ]
  },

  "functional_requirements": {
    "FR001": {
      "title": "CLI Command Structure",
      "description": "Implement `abathur task update <task-id> [options]` command following existing CLI patterns",
      "priority": "critical",
      "acceptance_criteria": [
        "Command follows Typer CLI framework patterns",
        "Supports task ID prefix resolution (first 8 chars minimum)",
        "Returns clear success/error messages",
        "Integrates with existing _get_services() and _resolve_task_id() helpers"
      ]
    },
    "FR002": {
      "title": "Status Update with Validation",
      "description": "Update task status via --status flag with state transition validation",
      "priority": "critical",
      "acceptance_criteria": [
        "Flag: --status <status-value> (pending|blocked|ready|running|completed|failed|cancelled)",
        "Validates status transitions using ALLOWED_TRANSITIONS matrix",
        "Rejects invalid transitions (e.g., completed â†’ running)",
        "Updates started_at/completed_at timestamps based on status",
        "Logs audit trail for status changes"
      ]
    },
    "FR003": {
      "title": "Priority Update with Recalculation",
      "description": "Update task priority via --priority flag with dependency graph recalculation",
      "priority": "high",
      "acceptance_criteria": [
        "Flag: --priority <0-10>",
        "Validates priority range (0-10 inclusive)",
        "Triggers PriorityCalculator.recalculate_priority() for dependent tasks",
        "Updates calculated_priority for downstream dependencies",
        "Shows summary of affected tasks if dependencies exist"
      ]
    },
    "FR004": {
      "title": "Agent Type Update with Status Check",
      "description": "Update agent type via --agent-type flag with status restrictions",
      "priority": "medium",
      "acceptance_criteria": [
        "Flag: --agent-type <agent-type-name>",
        "Only allows updates for tasks in PENDING or READY status",
        "Rejects updates for RUNNING, COMPLETED, FAILED tasks",
        "Validates agent type exists in .claude/agents/ directory",
        "Provides clear error message if status check fails"
      ]
    },
    "FR005": {
      "title": "Dependencies Update with Validation",
      "description": "Update task dependencies via --dependencies flag with circular dependency detection",
      "priority": "high",
      "acceptance_criteria": [
        "Flag: --dependencies <uuid1>,<uuid2>,...",
        "Supports both full UUIDs and prefixes",
        "Validates all prerequisite task IDs exist",
        "Detects circular dependencies using DependencyResolver",
        "Updates task status (BLOCKED if deps incomplete, READY if all met)",
        "Creates/updates TaskDependency records in database"
      ]
    },
    "FR006": {
      "title": "Atomic Multi-Field Updates",
      "description": "Support updating multiple fields in a single command with atomic transaction",
      "priority": "critical",
      "acceptance_criteria": [
        "Multiple flags can be combined (e.g., --status ready --priority 8)",
        "All updates execute in single database transaction",
        "Transaction rolls back if ANY validation fails",
        "Validation runs BEFORE database writes",
        "Clear error message indicates which validation failed"
      ]
    },
    "FR007": {
      "title": "Update Validation",
      "description": "Validate all updates before applying changes",
      "priority": "critical",
      "acceptance_criteria": [
        "Pre-flight validation for all fields",
        "Status transition validation (state machine)",
        "Dependency graph validation (circular deps, missing tasks)",
        "Agent type existence check",
        "Priority range check (0-10)",
        "Atomic rollback on validation failure"
      ]
    },
    "FR008": {
      "title": "Dry-Run Mode",
      "description": "Preview updates without applying changes via --dry-run flag",
      "priority": "medium",
      "acceptance_criteria": [
        "Flag: --dry-run",
        "Shows preview of changes without writing to database",
        "Displays current values vs new values",
        "Shows validation results",
        "Indicates if update would succeed or fail",
        "No database writes or side effects"
      ]
    }
  },

  "non_functional_requirements": {
    "NFR001": {
      "title": "Performance",
      "description": "Update operations must complete quickly",
      "target": "Single-field update <100ms, multi-field update <500ms",
      "measurement": "pytest-benchmark tests with timing assertions"
    },
    "NFR002": {
      "title": "Usability",
      "description": "CLI must follow existing Abathur patterns for consistency",
      "requirements": [
        "Use Rich console formatting for output",
        "Support task ID prefix resolution",
        "Provide clear, actionable error messages",
        "Include usage examples in help text",
        "Follow existing CLI flag naming conventions"
      ]
    },
    "NFR003": {
      "title": "Reliability",
      "description": "Updates must be atomic and safe",
      "requirements": [
        "Database transactions for atomicity",
        "Foreign key constraints enforced",
        "No partial updates on validation failure",
        "Audit trail for all changes",
        "Rollback on error"
      ]
    },
    "NFR004": {
      "title": "Security",
      "description": "Prevent invalid state transitions and data corruption",
      "requirements": [
        "Status transition validation (state machine)",
        "Circular dependency prevention",
        "SQL injection prevention (parameterized queries)",
        "Input validation for all parameters",
        "No direct database manipulation bypass"
      ]
    }
  },

  "constraints": {
    "technical": [
      "Must use existing Abathur architecture (Python 3.13+, Typer, AsyncIO, Pydantic, Rich, aiosqlite)",
      "Must work with existing database schema (no schema migrations required)",
      "Must integrate with existing TaskCoordinator, DependencyResolver, PriorityCalculator",
      "Must follow Clean Architecture layering",
      "Must use existing logging and audit trail infrastructure"
    ],
    "business": [
      "Cannot break existing task queue behavior",
      "Must maintain backward compatibility with existing tasks",
      "Must support existing CLI workflow patterns"
    ]
  },

  "status_transition_rules": {
    "description": "Allowed state transitions based on task lifecycle state machine",
    "ALLOWED_TRANSITIONS": {
      "PENDING": ["READY", "BLOCKED", "CANCELLED"],
      "BLOCKED": ["READY", "CANCELLED"],
      "READY": ["RUNNING", "CANCELLED"],
      "RUNNING": ["COMPLETED", "FAILED", "CANCELLED"],
      "COMPLETED": [],
      "FAILED": ["PENDING"],
      "CANCELLED": ["PENDING"]
    },
    "terminal_states": ["COMPLETED"],
    "retry_allowed_from": ["FAILED", "CANCELLED"]
  },

  "out_of_scope": [
    "Bulk update operations (update multiple tasks at once)",
    "Task content updates (prompt, input_data)",
    "Task deletion (use existing prune command)",
    "Task creation (use existing submit command)",
    "Custom field updates beyond the specified fields"
  ],

  "success_criteria": {
    "functional": [
      "All 8 functional requirements implemented and tested",
      "Status transitions validated correctly in 100% of cases",
      "Circular dependency detection works correctly",
      "Atomic multi-field updates work without partial failures"
    ],
    "non_functional": [
      "Single-field update completes in <100ms (NFR001)",
      "Multi-field update completes in <500ms (NFR001)",
      "Zero data corruption or partial update errors (NFR003)",
      "100% test coverage for validation logic"
    ],
    "user_experience": [
      "Users can update task status/priority/dependencies without re-creating tasks",
      "Clear error messages guide users when updates fail",
      "Dry-run mode allows safe preview of changes",
      "CLI feels consistent with existing Abathur commands"
    ]
  },

  "risks": [
    {
      "risk": "Status transition violations causing invalid task states",
      "impact": "high",
      "probability": "medium",
      "mitigation": "Comprehensive validation matrix + extensive testing + audit logging"
    },
    {
      "risk": "Partial updates due to transaction failure",
      "impact": "high",
      "probability": "low",
      "mitigation": "Database transactions with rollback + validation before writes"
    },
    {
      "risk": "Circular dependency creation",
      "impact": "medium",
      "probability": "medium",
      "mitigation": "Use existing DependencyResolver.detect_circular_dependencies()"
    },
    {
      "risk": "Performance degradation with large dependency graphs",
      "impact": "medium",
      "probability": "low",
      "mitigation": "Priority recalculation already optimized (<5ms), test with realistic graphs"
    }
  ],

  "dependencies": {
    "internal": [
      "TaskCoordinator (src/abathur/application/task_coordinator.py)",
      "Database (src/abathur/infrastructure/database.py)",
      "DependencyResolver (src/abathur/services/dependency_resolver.py)",
      "PriorityCalculator (src/abathur/services/priority_calculator.py)",
      "TaskStatus enum (src/abathur/domain/models.py)",
      "Typer CLI framework (existing)",
      "Rich console (existing)"
    ],
    "external": [
      "Python 3.13+",
      "Typer 0.12.5+",
      "Rich 13.9.4+",
      "aiosqlite 0.20.0+",
      "Pydantic 2.10.3+"
    ]
  },

  "test_strategy": {
    "unit_tests": [
      "Status transition validator (all transitions)",
      "Update request model validation",
      "Error model construction"
    ],
    "integration_tests": [
      "Database update transactions",
      "Multi-field atomic updates",
      "Dependency graph updates",
      "Priority recalculation triggers"
    ],
    "e2e_tests": [
      "CLI command execution (single field)",
      "CLI command execution (multiple fields)",
      "Dry-run mode",
      "Error paths (invalid transitions, missing tasks, etc.)"
    ],
    "performance_tests": [
      "Single-field update latency (<100ms)",
      "Multi-field update latency (<500ms)",
      "Priority recalculation with 100+ task graph"
    ]
  }
}
